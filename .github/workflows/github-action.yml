name: Push to ECR

on:
  workflow_dispatch:  # Allows manual
#   push:
#     branches:
#       - main
jobs:
  push-to-ecr:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # Step 4: Build and push Docker images for each service
      - name: Build and push Cart image
        run: |
          aws_account_id=$(aws sts get-caller-identity --query "Account" --output text)
          cart_image="${aws_account_id}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dacn-repo:cart" # Tag for Cart image
          cd E-Commerce_Web_Application/Cart
          docker build -t $cart_image .
          docker push $cart_image
      
      - name: Build and push User image
        run: |
          aws_account_id=$(aws sts get-caller-identity --query "Account" --output text)
          user_image="${aws_account_id}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dacn-repo:user" # Tag for User image
          cd E-Commerce_Web_Application/User
          docker build -t $user_image .
          docker push $user_image
      
      - name: Build and push Product image
        run: |
          aws_account_id=$(aws sts get-caller-identity --query "Account" --output text)
          product_image="${aws_account_id}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dacn-repo:product" # Tag for Product image
          cd E-Commerce_Web_Application/Product
          docker build -t $product_image .
          docker push $product_image
